from app.controller.eiprice_db import consultar
from app.controller.raspagem import obter_dados
from fastapi import FastAPI
import pandas as pd


# Cria a tabela e adiciona a categoria.
#aplicar_banco(f"CREATE TABLE categoria (id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 42 CYCLE), nome varchar, primary key (id))")
#aplicar_banco(f"INSERT INTO categoria (nome) SELECT 'alimentos' WHERE NOT EXISTS (SELECT * FROM categoria WHERE nome = 'alimentos')")


# Chama a função para realizar o scraping e armazenas no banco de dados
#extrair_dados(obter_categorias("alimentos", "*", "*"))
obter = True
print("Carregando...")
while obter:
    obter_dados()
    print("Carregado!")
    obter = False



app = FastAPI()

@app.post("/")
async def root():
    #Outro formar de raspagem de dados sem o uso do Selenium
    return {"Shopper": "scraping"}

@app.get("/{id_categoria}/{id_departamento}/{id_produto}")
async def read_departamento_id(id_categoria, id_departamento, id_produto: str):
    """Rota para consulta de produtos

    Args:
        id_categoria (_int_): _Recebe um atributo inteiro referente ao id da categoria cadastra para consulta_
        id_departamento (_int_): _Recebe um atributo inteiro referente ao id da departamento cadastra para consulta_
        id_produto (int): _Recebe um atributo inteiro referente ao id da produto cadastra para consulta_

    Returns:
        _dict_: _Retorna um dicionario contendo os dados cadastrado do produto extraido no scraping, contendo os dados como "nome", "img"
        "valor", "avg-> Média de preço", "desconto", "descrição do produto", "dt_hora no formato timestamp", "categoria", "departamento", 
        "e valores ofertado em outros estabelecimentos"
    """
    dados_recebido = consultar(f'select produto.nome, produto.img, produto.valor, produto.avg, produto.desconto, produto.descricao, produto.dt_hora, categoria.nome as "categoria", sub_categoria.nome as "departamento" from produto inner join sub_categoria on sub_categoria.id = produto.id_sub_categoria inner join categoria on categoria.id = sub_categoria.id_categoria where produto.id = {id_produto} and sub_categoria.id = {id_departamento} and categoria.id = {id_categoria}')
    df_produto = pd.DataFrame(dados_recebido, columns=['nome', 'img', 'valor', 'avg', 'desconto', 'descricao', 'dt_hora', 'categoria', 'departamento'])
    tabela_produto = df_produto.set_index("categoria").T.to_dict("dict")
    dados_recebido = consultar(f'select outro.nome, outro.valor from outro where id_produto = {id_produto}')
    df_outro = pd.DataFrame(dados_recebido, columns=['nome', 'valor'])
    tabela_outro = df_outro.set_index("nome").to_dict("dict")
    tabela_produto.update(tabela_outro)
    
    return tabela_produto

